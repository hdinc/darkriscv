/*
    Memory Architectures:

	- Harvard: separate instruction (ROM) and data (RAM), has the
	  advantage that is possible make the ROM memory readonly, in a way
	  that bugs in the code cannot destruct the code.  Also, the use of
	  separate ROM and RAM makes possible share the dual-port ROM and/or
	  RAM between two cores.

	- Von Neumann: unified instruction and data in a single memory
	  (MEM), has the advantage that the .text and .data are contigous
	  and without gaps, which means that the memory is better utilized.
	  However, as long there is no physical separation, a bug in the
	  code can destroy both data and code.  Also, as long both ports of
	  the dual-port MEM is already in use, there is no way to share to
	  more than one core.
*/

MEMORY
{
    IO  (rw!x) : ORIGIN = 0x80000000, LENGTH = 0x10
#if HARVARD
    ROM (x!rw) : ORIGIN = 0x00000000, LENGTH = 0x1000
    RAM (rw!x) : ORIGIN = 0x00001000, LENGTH = 0x1000
#else
    MEM (rwx)  : ORIGIN = 0x00000000, LENGTH = 0x2000
#endif
}

SECTIONS
{
    .text :
    {
        *(.boot)
        *(.text)
#if HARVARD
    } > ROM
#else
    } > MEM
#endif
    .data :
    {
        *(.rodata*)
        *(.data)
        _global = . + 0x800;
        *(.sbss)
        *(.bss)
	_heap = .;

#if HARVARD
    } > RAM

   PROVIDE ( _stack = ORIGIN(RAM) + LENGTH(RAM) );

#else
    } > MEM

   PROVIDE ( _stack = ORIGIN(MEM) + LENGTH(MEM) );
#endif

    .io : { io.o(COMMON) } > IO
}
